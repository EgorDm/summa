syntax = "proto3";
package summa.proto;


// Service
service SearchApi {
  rpc search (SearchRequest) returns (SearchResponse) {}
}

message SearchRequest {
  string index_alias = 1;
  Query query = 2;
  repeated Collector collectors = 3;
}

message SearchResponse {
  string index_name = 1;
  repeated CollectorResult collector_results = 2;
}

// Utils

message Collector {
  oneof collector {
    TopDocsCollector top_docs = 1;
    ReservoirSamplingCollector reservoir_sampling = 2;
    CountCollector count = 3;
  }
}

message CollectorResult {
  oneof collector_result {
    TopDocsCollectorResult top_docs = 1;
    ReservoirSamplingCollectorResult reservoir_sampling = 2;
    CountCollectorResult count = 3;
  }
}

message CountCollector {}
message CountCollectorResult { uint32 count = 1; }

enum Occur {
  should = 0;
  must = 1;
  must_not = 2;
}

message ScoredDocument {
  string document = 1;
  float score = 2;
  uint32 position = 3;
}

message TopDocsCollector {
  uint32 limit = 1;
  uint32 offset = 2;
  string order_by_u64_field = 3;
}

message TopDocsCollectorResult {
  repeated ScoredDocument scored_documents = 1;
  bool has_next = 2;
}

message Range {
  string left = 1;
  string right = 2;
  bool including_left = 3;
  bool including_right = 4;
}

message ReservoirSamplingCollector {
  uint32 limit = 1;
}

message ReservoirSamplingCollectorResult {
  repeated string documents = 1;
}

// Queries

message Query {
  oneof query {
    BooleanQuery bool = 1;
    MatchQuery match = 2;
    RegexQuery regex = 3;
    TermQuery term = 4;
    PhraseQuery phrase = 5;
    RangeQuery range = 6;
    AllQuery all = 7;
    MoreLikeThisQuery more_like_this = 8;
    BoostQuery boost = 9;
  }
}

message AllQuery {}

message BoostQuery {
  Query query = 1;
  string score = 2;
}

message MoreLikeThisQuery {}

message PhraseQuery {
  string field = 1;
  string value = 2;
  uint32 slop = 3;
}

message RangeQuery {
  string field = 1;
  Range value = 2;
}

message MatchQuery {
  string value = 1;
}

message BooleanSubquery {
  Occur occur = 1;
  Query query = 2;
}

message BooleanQuery {
  repeated BooleanSubquery subqueries = 1;
}

message RegexQuery {
  string field = 1;
  string value = 2;
}

message TermQuery {
  string field = 1;
  string value = 2;
}